df_filter <- read_excel(filename, sheet = listSheets[grep(paste0("SRP ", year), listSheets)], skip = 2)
excludeEmpty <- function(df) {
naCols <- apply(df, 2, function(c) all(is.na(c)))
df[, !naCols]
}
# tmpList <- list(df_raw, df_extra, df_filter)
# Map(excludeEmpty, tmpList) ## returns list of dataframes with excluded empty columns
df_raw <- excludeEmpty(df_raw)
df_extra <- excludeEmpty(df_extra)
df_filter <- excludeEmpty(df_filter)
df_filter
df_extra
df_raw
list_var <- c('Recipient country', 'Donor', 'Type of appeal issued', 'Amount in US$')
df_selectionx <- df_raw[, list_var]
names(df_selectionx) <- c('country', 'donor', 'appeal', 'amount_received')
head(df_selectionx)
df_extra <- df_extra[df_extra$Status %in% 'Contribution', c(3, 5, 7, 9)]
names(df_extra) <- c('country', 'donor', 'appeal', 'amount_received')
head(df_extra)
df_selection <- rbind(df_selectionx, df_extra)
df_selection
head(df_selection)
names(df_filter) <- c('appeal', 'status', 'amount_requested')
head(df_filter)
## Merge datasets to restrict to appeals of interest
df <- merge(df_filter, df_selection)
tail(df)
list_status <- factor(c('L3', 'L2', 'Priority', 'Other'))
list_country <- sort(unique(df$country))
list_donor <- sort(unique(df$donor))
list_appeal <- sort(unique(df$appeal))
df %>%
group_by(appeal, status, donor) %>%
summarise(total_requested = min(amount_requested, na.rm = T),
total_received = sum(amount_received, na.rm = T),
prop_funded = round(sum(amount_received, na.rm = T)/min(amount_requested, na.rm = T)*100, digits = 1)) %>%
arrange(status, appeal, desc(total_received))
df_donor <-
df %>%
group_by(appeal, status, donor) %>%
summarise(total_requested = min(amount_requested, na.rm = T),
total_received = sum(amount_received, na.rm = T),
prop_funded = round(sum(amount_received, na.rm = T)/min(amount_requested, na.rm = T)*100, digits = 1)) %>%
arrange(status, appeal, desc(total_received))
df_donor$prop_funded <- ifelse(df_donor$prop_funded == Inf, 100, df_donor$prop_funded)
df_donor$prop_funded[is.na(df_donor$prop_funded)] <- 0
df_total <-
df %>%
#group_by(country, appeal, status) %>%
group_by(appeal, status) %>%
summarise(total_requested = min(amount_requested, na.rm = T),
total_received = sum(amount_received, na.rm = T),
prop_funded = round(sum(amount_received, na.rm = T)/min(amount_requested, na.rm = T)*100, digits = 1)) %>%
arrange(desc(prop_funded), status, appeal)
df_total$prop_funded <- ifelse(df_total$prop_funded == Inf, 100, df_total$prop_funded)
df_total$prop_funded[is.na(df_total$prop_funded)] <- 0
df_total$status <- factor(df_total$status, levels = c('L3', 'L2', 'Priority', 'Other'))
df_total <- arrange(df_total, desc(prop_funded))
df_total <- df_total %>% filter(!is.na(status))
list_appeals_L3 <- sort(unique(df_total$appeal[df_total$status == 'L3']))
list_appeals_priority <- sort(unique(df_total$appeal[df_total$status == 'Priority']))
list_appeals_other <- sort(unique(df_total$appeal[df_total$status == 'Other']))
blues_func <- colorRampPalette(brewer.pal(9, 'Blues'))
red_func <- colorRampPalette(brewer.pal(9, 'Reds'))
func_pie <- function(x, appeal) {
x <- x[x$appeal == appeal, ]
#x <- df_donor[df_donor$appeal == 'Central African Republic: SRP 2014', ]
x_melt <- melt(x, id = c('appeal', 'status', 'donor', 'total_requested'))
dat <- x_melt %>%
mutate(pos = cumsum(value) - 0.5*value)
dat$donor <- factor(dat$donor, levels = dat$donor)
ggplot(dat, aes(x = '', y = value, order = -value, fill = donor)) +
geom_bar(width = 1, stat = 'identity', colour = 'white') +
coord_polar('y', start = 0) +
#scale_fill_discrete() +
scale_fill_manual(values = blues_func(nrow(dat)/2)) +
#guides(fill = guide_legend(title = 'Donor', ncol = 2)) +
theme_bw() +
theme(panel.border = element_blank(),
plot.title = element_text(size = 12, face = 'bold', color = 'darkblue'),
#plot.title = element_text(family = 'Calibri', size = 12, face = 'bold', color = 'darkblue'),
legend.key = element_blank(),
legend.position = '',
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid  = element_blank()) +
labs(title = paste0('Firm pledges/contributions received\nby WHO: US$', comma(sum(x_melt$value, na.rm = T))),
x = '', y = '')
}
#func_pie(df_donor, list_appeal[2])
#func_pie(df_donor, list_appeal[7])
#for (i in list_appeal) {
#    func_pie(df_donor, i)
#    ggsave(file = paste0('fig_', i, '.pdf'), width = 6, height = 4)
#    #embed_fonts(paste0('fig_', i, '.pdf'), outfile = paste0('fig_', i, '_embed.pdf'))
#    print(paste('map of', i))
#}
## Overall snapshots
df_total$appeal <- factor(df_total$appeal, levels = df_total$appeal)
wind_chart <-
ggplot(df_total, aes(x = appeal, y = prop_funded, order = -prop_funded, fill = appeal)) +
geom_bar(width = 1, stat = 'identity', colour = 'white') +
coord_polar("y", start = 0) +
scale_fill_manual(values = blues_func(nrow(df_total))) +
theme_bw() +
#guides(fill = guide_legend(title = 'Donor', ncol = 2)) +
theme(panel.border = element_blank(),
plot.title = element_text(size = 12, face = 'bold', color = 'darkblue'),
#plot.title = element_text(family = 'Calibri', size = 12, face = 'bold', color = 'darkblue'),
legend.key = element_blank(),
#legend.position = '',
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid  = element_blank()) +
labs(title = 'Proportion of total amount requested\nalready contributed or firmly pledged, by appeal',
x = '', y = '')
#ggsave(file = 'fig_wind_chart.pdf', width = 6, height = 4)
bar_chart <-
#ggplot(df_total, aes(x = appeal, y = prop_funded, order = -prop_funded, fill = appeal)) +
ggplot(df_total, aes(x = appeal, y = prop_funded, fill = appeal)) +
geom_bar(stat = 'identity', colour = 'white') +
scale_fill_manual(values = blues_func(nrow(df_total))) +
#theme_bw() +
theme(panel.border = element_blank(),
plot.title = element_text(size = 12, face = 'bold', color = 'darkblue'),
#plot.title = element_text(family = 'Calibri', size = 12, face = 'bold', color = 'darkblue'),
legend.key = element_blank(),
legend.position = '',
axis.text.x = element_text(size = 7, angle = 45, hjust = 1, colour = 'black'),
#axis.text = element_blank(),
#panel.grid  = element_blank(),
axis.ticks = element_blank()) +
labs(title = '', x = '', y = 'Funded (%)')
bar_chart
wind_chart
func_pie
func_pie()
func_pie(df)
if(!require(XLConnect)) {install.packages("XLConnect"); require(XLConnect)}
library(readxl)
if(!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if(!require(dplyr)) {install.packages("dplyr"); require(dplyr)}
if(!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if(!require(scales)) {install.packages("scales"); require(scales)}
if(!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if(!require(xtable)) {install.packages("xtable"); require(xtable)}
library(gWidgets)
options("guiToolkit" = "tcltk")
filename <- list.files(path = '.', pattern = "xlsx")
filename
filename <- list.files(path = '.', pattern = "xlsx")
filename
list_appeals_L3
# Load required packages
if(!require(XLConnect)) {install.packages("XLConnect"); require(XLConnect)}
library(readxl)
if(!require(ggplot2)) {install.packages("ggplot2"); require(ggplot2)}
if(!require(dplyr)) {install.packages("dplyr"); require(dplyr)}
if(!require(reshape2)) {install.packages("reshape2"); require(reshape2)}
if(!require(scales)) {install.packages("scales"); require(scales)}
if(!require(RColorBrewer)) {install.packages("RColorBrewer"); require(RColorBrewer)}
if(!require(xtable)) {install.packages("xtable"); require(xtable)}
library(gWidgets)
options("guiToolkit" = "tcltk")
filename <- list.files(path = '.', pattern = "xlsx")
# year <- list.files(path = '.', pattern = "txt")
# year <- sub('.txt', '', year)
# year <- '2015'
w <- gbasicdialog(title = "Select year \nof interest", do.buttons=TRUE, handler = function(h, ...)
year <<- svalue(selection))
selection <- gcombobox(c("2014", "2015"), editable = TRUE, expand = TRUE, container = w)
visible(w, set = TRUE) ## show dialog
# wb <- loadWorkbook(filename, create = F)
# listSheets <- getSheets(wb)
listSheets <- excel_sheets(filename)
# df_raw <- readWorksheet(wb, sheet = listSheets[grep("Contribution", listSheets)], startRow = 2)
# df_extra <- readWorksheet(wb, sheet = listSheets[grep(paste0("ctrbns ", year), listSheets)], startRow = 2)
# df_filter <- readWorksheet(wb, sheet = listSheets[grep(paste0("SRP ", year), listSheets)], startRow = 3)
df_raw <- read_excel(filename, sheet = listSheets[grep("Contribution", listSheets)], skip = 1)
df_extra <- read_excel(filename, sheet = listSheets[grep(paste0("ctrbns ", year), listSheets)], skip = 1)
df_filter <- read_excel(filename, sheet = listSheets[grep(paste0("SRP ", year), listSheets)], skip = 2)
excludeEmpty <- function(df) {
naCols <- apply(df, 2, function(c) all(is.na(c)))
df[, !naCols]
}
# tmpList <- list(df_raw, df_extra, df_filter)
# Map(excludeEmpty, tmpList) ## returns list of dataframes with excluded empty columns
df_raw <- excludeEmpty(df_raw)
df_extra <- excludeEmpty(df_extra)
df_filter <- excludeEmpty(df_filter)
## Create lists of variables of interest
list_var <- c('Recipient country', 'Donor', 'Type of appeal issued', 'Amount in US$')
## Restrict dataframe to variables of interest
df_selectionx <- df_raw[, list_var]
names(df_selectionx) <- c('country', 'donor', 'appeal', 'amount_received')
head(df_selectionx)
df_extra <- df_extra[df_extra$Status %in% 'Contribution', c(3, 5, 7, 9)]
names(df_extra) <- c('country', 'donor', 'appeal', 'amount_received')
head(df_extra)
df_selection <- rbind(df_selectionx, df_extra)
head(df_selection)
names(df_filter) <- c('appeal', 'status', 'amount_requested')
head(df_filter)
## Merge datasets to restrict to appeals of interest
df <- merge(df_filter, df_selection)
tail(df)
# df$amount_requested <- as.numeric(levels(df$amount_requested))[df$amount_requested]
# df$amount_received <- as.numeric(levels(df$amount_received))[df$amount_received]
list_status <- factor(c('L3', 'L2', 'Priority', 'Other'))
list_country <- sort(unique(df$country))
list_donor <- sort(unique(df$donor))
list_appeal <- sort(unique(df$appeal))
df_donor <-
df %>%
group_by(appeal, status, donor) %>%
summarise(total_requested = min(amount_requested, na.rm = T),
total_received = sum(amount_received, na.rm = T),
prop_funded = round(sum(amount_received, na.rm = T)/min(amount_requested, na.rm = T)*100, digits = 1)) %>%
arrange(status, appeal, desc(total_received))
df_donor$prop_funded <- ifelse(df_donor$prop_funded == Inf, 100, df_donor$prop_funded)
df_donor$prop_funded[is.na(df_donor$prop_funded)] <- 0
df_total <-
df %>%
#group_by(country, appeal, status) %>%
group_by(appeal, status) %>%
summarise(total_requested = min(amount_requested, na.rm = T),
total_received = sum(amount_received, na.rm = T),
prop_funded = round(sum(amount_received, na.rm = T)/min(amount_requested, na.rm = T)*100, digits = 1)) %>%
arrange(desc(prop_funded), status, appeal)
df_total$prop_funded <- ifelse(df_total$prop_funded == Inf, 100, df_total$prop_funded)
df_total$prop_funded[is.na(df_total$prop_funded)] <- 0
df_total$status <- factor(df_total$status, levels = c('L3', 'L2', 'Priority', 'Other'))
df_total <- arrange(df_total, desc(prop_funded))
df_total <- df_total %>% filter(!is.na(status))
list_appeals_L3 <- sort(unique(df_total$appeal[df_total$status == 'L3']))
list_appeals_priority <- sort(unique(df_total$appeal[df_total$status == 'Priority']))
list_appeals_other <- sort(unique(df_total$appeal[df_total$status == 'Other']))
blues_func <- colorRampPalette(brewer.pal(9, 'Blues'))
red_func <- colorRampPalette(brewer.pal(9, 'Reds'))
func_pie <- function(x, appeal) {
x <- x[x$appeal == appeal, ]
#x <- df_donor[df_donor$appeal == 'Central African Republic: SRP 2014', ]
x_melt <- melt(x, id = c('appeal', 'status', 'donor', 'total_requested'))
dat <- x_melt %>%
mutate(pos = cumsum(value) - 0.5*value)
dat$donor <- factor(dat$donor, levels = dat$donor)
ggplot(dat, aes(x = '', y = value, order = -value, fill = donor)) +
geom_bar(width = 1, stat = 'identity', colour = 'white') +
coord_polar('y', start = 0) +
#scale_fill_discrete() +
scale_fill_manual(values = blues_func(nrow(dat)/2)) +
#guides(fill = guide_legend(title = 'Donor', ncol = 2)) +
theme_bw() +
theme(panel.border = element_blank(),
plot.title = element_text(size = 12, face = 'bold', color = 'darkblue'),
#plot.title = element_text(family = 'Calibri', size = 12, face = 'bold', color = 'darkblue'),
legend.key = element_blank(),
legend.position = '',
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid  = element_blank()) +
labs(title = paste0('Firm pledges/contributions received\nby WHO: US$', comma(sum(x_melt$value, na.rm = T))),
x = '', y = '')
}
#func_pie(df_donor, list_appeal[2])
#func_pie(df_donor, list_appeal[7])
#for (i in list_appeal) {
#    func_pie(df_donor, i)
#    ggsave(file = paste0('fig_', i, '.pdf'), width = 6, height = 4)
#    #embed_fonts(paste0('fig_', i, '.pdf'), outfile = paste0('fig_', i, '_embed.pdf'))
#    print(paste('map of', i))
#}
## Overall snapshots
df_total$appeal <- factor(df_total$appeal, levels = df_total$appeal)
wind_chart <-
ggplot(df_total, aes(x = appeal, y = prop_funded, order = -prop_funded, fill = appeal)) +
geom_bar(width = 1, stat = 'identity', colour = 'white') +
coord_polar("y", start = 0) +
scale_fill_manual(values = blues_func(nrow(df_total))) +
theme_bw() +
#guides(fill = guide_legend(title = 'Donor', ncol = 2)) +
theme(panel.border = element_blank(),
plot.title = element_text(size = 12, face = 'bold', color = 'darkblue'),
#plot.title = element_text(family = 'Calibri', size = 12, face = 'bold', color = 'darkblue'),
legend.key = element_blank(),
#legend.position = '',
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid  = element_blank()) +
labs(title = 'Proportion of total amount requested\nalready contributed or firmly pledged, by appeal',
x = '', y = '')
#ggsave(file = 'fig_wind_chart.pdf', width = 6, height = 4)
bar_chart <-
#ggplot(df_total, aes(x = appeal, y = prop_funded, order = -prop_funded, fill = appeal)) +
ggplot(df_total, aes(x = appeal, y = prop_funded, fill = appeal)) +
geom_bar(stat = 'identity', colour = 'white') +
scale_fill_manual(values = blues_func(nrow(df_total))) +
#theme_bw() +
theme(panel.border = element_blank(),
plot.title = element_text(size = 12, face = 'bold', color = 'darkblue'),
#plot.title = element_text(family = 'Calibri', size = 12, face = 'bold', color = 'darkblue'),
legend.key = element_blank(),
legend.position = '',
axis.text.x = element_text(size = 7, angle = 45, hjust = 1, colour = 'black'),
#axis.text = element_blank(),
#panel.grid  = element_blank(),
axis.ticks = element_blank()) +
labs(title = '', x = '', y = 'Funded (%)')
#ggsave(file = 'fig_bar_chart.pdf', width = 12, height = 8)
# save.image("./2.analysed2015.RData")
df_total
list_appeals_L3
list_appeals_priority
list_appeals_other
df_total$status
df_total$status <- factor(df_total$status, levels = c('L3', 'L2', 'Priority', 'Other'))
df_total <- df_total[order(df_total$status, desc(df_total$prop_funded)), ]
names(df_total) <- c('Appeal', 'Crisis type', 'Amount requested', 'Amount received', 'Funded (%)')#, '(%)')
df_total
if(nrow(df_total)>1) {rws <- seq(1, nrow(df_total) - 1, by = 2)}
#col <- rep("\\rowcolor[gray]{0.95}", length(rws))
#col <- rep("\\rowcolor{blue!5}", length(rws))
col <- rep("\\rowcolor{whoblue!15}", length(rws))
z <- xtable(space(df_total), caption = 'Overview of amounts donated/firmly pledged as a percentage of total requested, by appeal', digits = 0, label = "tab_overview")
source('./code/my_functions.R')
z <- xtable(space(df_total), caption = 'Overview of amounts donated/firmly pledged as a percentage of total requested, by appeal', digits = 0, label = "tab_overview")
z
align(z) <- 'lllrrr'
print(z, type = 'latex', booktabs = T, caption.placement = "top", add.to.row = list(pos = as.list(rws), command = col), include.rownames=FALSE, scalebox=.95)
bar_chart
df_donor <- as.data.frame(df_donor)
df_donor
for (j in list_status) {
cat(paste0("\\clearpage\n"))
if(j == 'L3') {
cat(paste0("\\section{Grade 3 emergencies}\n"))
} else if (j == 'L2') {
cat(paste0("\\section{Grade 2 emergencies}\n"))
} else if (j == 'Priority') {
cat(paste0("\\section{Priority countries}\n"))
} else {
cat(paste0("\\section{Other appeals}\n"))
}
for (i in df_filter[df_filter$status == j, 'appeal']) {
cat(paste0("\\subsection{", i, "}\n"))
df_selected <- df_donor[df_donor$status == j & df_donor$appeal == i, ][, c(3, 5, 6)]
names(df_selected) <- c('Donor', 'Amount received', 'Funded (%)')
total_col <- colSums(df_selected[, c(2, 3)])
total_colx <- c(0, total_col)
names(total_colx) <- c('Donor', 'Amount received', 'Funded (%)')
total_colx[3] <- ifelse(total_colx[3]>100, '-', total_colx[3])
df_selected <- rbind(df_selected, total_colx)
# levels(df_selected$Donor) <- c(levels(df_selected$Donor), 'TOTAL', 'None')
df_selected$Donor[nrow(df_selected)] <- 'TOTAL'
df_selected[, 2] <- as.numeric(df_selected[, 2])
# df_selected$Donor[df_selected$Donor %in% ''] <- 'None'
df_selected$Donor[is.na(df_selected$Donor)] <- 'None'
if(nrow(df_selected)>1) {rws <- seq(1, nrow(df_selected) - 1, by = 2)}
col <- rep("\\rowcolor{whoblue!15}", length(rws))
z <- xtable(space(df_selected), caption = paste0('Overview of amounts donated/firmly pledged as a percentage of total requested: ', i), digits = 0, label = paste0('tab_', i))
comment          <- list()
comment$pos      <- list()
comment$pos[[1]] <- c(nrow(z))
if(df_donor[df_donor$status == j & df_donor$appeal == i, ][1, 4] == 0) {
comment$command  <- c(paste0("\\hline \n\\emph{\\footnotesize{\\textcolor{red}{N.B. No funding requirements established against this appeal.}}}\n"))
} else {
comment$command  <- c(paste0("\\hline \n\\emph{\\footnotesize{Amount requested: US\\$ ", space(df_donor[df_donor$status == j & df_donor$appeal == i, ][1, 4]),"}}\n"))
}
align(z) <- 'llrr' # to be used with: tabular.environment="tabularx"
#print(z, type = 'latex', floating='F', table.placement="!htp", booktabs = T, caption.placement = "top", include.rownames=FALSE, latex.environments="center", add.to.row = comment, hline.after = c(-1, 0))
print(z, type = 'latex', floating='F', table.placement="!htp", booktabs = T, caption.placement = "top", include.rownames=FALSE, latex.environments="center", add.to.row = list(pos = as.list(rws), command = col))
if(df_donor[df_donor$status == j & df_donor$appeal == i, ][1, 4] == 0) {
cat(paste0("\n\\emph{\\footnotesize{\\textcolor{red}{N.B. No funding requirements established against this appeal}}}\n"))
} else {
cat(paste0("\n\\emph{\\footnotesize{Amount requested: US\\$ ", space(df_donor[df_donor$status == j & df_donor$appeal == i, ][1, 4]),"}}\n"))
}
}
}
j
i
df_filter[df_filter$status == j, 'appeal']
df_filter[df_filter$status %in% j, 'appeal']
df_filter[df_filter$status %in% j, 'appeal']
df_filter[df_filter$status %in% j, 'appeal']
j
i
j
df_donor <- as.data.frame(df_donor)
for (j in list_status) {
cat(paste0("\\clearpage\n"))
if(j == 'L3') {
cat(paste0("\\section{Grade 3 emergencies}\n"))
} else if (j == 'L2') {
cat(paste0("\\section{Grade 2 emergencies}\n"))
} else if (j == 'Priority') {
cat(paste0("\\section{Priority countries}\n"))
} else {
cat(paste0("\\section{Other appeals}\n"))
}
for (i in df_filter[df_filter$status %in% j, 'appeal']) {
cat(paste0("\\subsection{", i, "}\n"))
df_selected <- df_donor[df_donor$status == j & df_donor$appeal == i, ][, c(3, 5, 6)]
names(df_selected) <- c('Donor', 'Amount received', 'Funded (%)')
total_col <- colSums(df_selected[, c(2, 3)])
total_colx <- c(0, total_col)
names(total_colx) <- c('Donor', 'Amount received', 'Funded (%)')
total_colx[3] <- ifelse(total_colx[3]>100, '-', total_colx[3])
df_selected <- rbind(df_selected, total_colx)
# levels(df_selected$Donor) <- c(levels(df_selected$Donor), 'TOTAL', 'None')
df_selected$Donor[nrow(df_selected)] <- 'TOTAL'
df_selected[, 2] <- as.numeric(df_selected[, 2])
# df_selected$Donor[df_selected$Donor %in% ''] <- 'None'
df_selected$Donor[is.na(df_selected$Donor)] <- 'None'
if(nrow(df_selected)>1) {rws <- seq(1, nrow(df_selected) - 1, by = 2)}
col <- rep("\\rowcolor{whoblue!15}", length(rws))
z <- xtable(space(df_selected), caption = paste0('Overview of amounts donated/firmly pledged as a percentage of total requested: ', i), digits = 0, label = paste0('tab_', i))
comment          <- list()
comment$pos      <- list()
comment$pos[[1]] <- c(nrow(z))
if(df_donor[df_donor$status == j & df_donor$appeal == i, ][1, 4] == 0) {
comment$command  <- c(paste0("\\hline \n\\emph{\\footnotesize{\\textcolor{red}{N.B. No funding requirements established against this appeal.}}}\n"))
} else {
comment$command  <- c(paste0("\\hline \n\\emph{\\footnotesize{Amount requested: US\\$ ", space(df_donor[df_donor$status == j & df_donor$appeal == i, ][1, 4]),"}}\n"))
}
align(z) <- 'llrr' # to be used with: tabular.environment="tabularx"
#print(z, type = 'latex', floating='F', table.placement="!htp", booktabs = T, caption.placement = "top", include.rownames=FALSE, latex.environments="center", add.to.row = comment, hline.after = c(-1, 0))
print(z, type = 'latex', floating='F', table.placement="!htp", booktabs = T, caption.placement = "top", include.rownames=FALSE, latex.environments="center", add.to.row = list(pos = as.list(rws), command = col))
if(df_donor[df_donor$status == j & df_donor$appeal == i, ][1, 4] == 0) {
cat(paste0("\n\\emph{\\footnotesize{\\textcolor{red}{N.B. No funding requirements established against this appeal}}}\n"))
} else {
cat(paste0("\n\\emph{\\footnotesize{Amount requested: US\\$ ", space(df_donor[df_donor$status == j & df_donor$appeal == i, ][1, 4]),"}}\n"))
}
}
}
i
j
list_status
df_filter[df_filter$status %in% j, 'appeal']
df_filter
df_filter[df_filter$status %in% j, 'appeal']
as.character(df_filter[df_filter$status %in% j, 'appeal'])
df_filter$appeal[df_filter$status %in% j]
list_status
sourceFile <- function() gfile("Select a file", type="open", handler = function(h,...) source(h$file))
sourceFile
fileChoose <- function(action="print", text = "Select a file...",                      type="open", ...) {  gfile(text=text, type=type, ..., action = action, handler =          function(h,...) {            do.call(h$action, list(h$file))          })}
fileChoose <- function(action="print", text = "Select a file...",                      type="open", ...) {  gfile(text=text, type=type, ..., action = action, handler =          function(h,...) {            do.call(h$action, list(h$file))          })}
fileChoose <- function(action="print", text = "Select a file...", type="open", ...) {  gfile(text=text, type=type, ..., action = action, handler =          function(h,...) {            do.call(h$action, list(h$file))          })}
fileChoose <- function(action="print", text = "Select a file...", type="open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {            do.call(h$action, list(h$file))          })}
fileChoose
fileChoose <- function(action="print", text = "Select a file...", type="open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {            do.call(h$action, list(h$file))          })}
library(gWidgets)
options("guiToolkit" = "tcltk")
fileChoose <- function(action = "print", text = "Select a file...", type = "open", ...) {
gfile(text=text, type=type, ..., action = action, handler = function(h,...) {
do.call(h$action, list(h$file))
})
}
fileChoose <- function(action = "print", text = "Select a file...", type = "open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {            do.call(h$action, list(h$file))          })}
fileChoose
fileChoose <- function(action = "print", text = "Select a file...", type = "open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {            do.call(h$action, list(h$file))          }        )}
fileChoose <- function(action = "print", text = "Select a file...", type = "open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {            do.call(h$action, list(h$file))          }        )}
fileChoose <- function(action = "print", text = "Select a file...",                        type = "open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {            do.call(h$action, list(h$file))          }        )}
fileChoose <- function(action = "print", text = "Select a file...", type = "open", ...) {
gfile(text=text, type=type, ..., action = action, handler = function(h,...) {
do.call(h$action, list(h$file))
}
)
}
fileChoose
fileChoose(action="source")
fileChoose()
fileChoose(action = "print(h$file)")
fileChoose(action = "list.file")
fileChoose(action = "list.files")
x <- fileChoose(action = "list.files")
x
filename <- fileChoose(action = "list.files")
filename
listSheets <- excel_sheets(filename)
library(readxl)
listSheets <- excel_sheets(filename)
listSheets
filename <- fileChoose()
filename
fileChoose <- function(action = "list.files", text = "Select a file...", type = "open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {            do.call(h$action, list(h$file))          }        )}
fileChoose <- function(action = "list.files", text = "Select a file...", type = "open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {    do.call(h$action, list(h$file))    })  }
fileChoose <- function(action = "list.files", text = "Select a file...", type = "open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {    do.call(h$action, list(h$file))    })  }
fileChoose <- function(action = "list.files", text = "Select a file...", type = "open", ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {    do.call(h$action, list(h$file))  })}
fileChoose <- function(action = 'list.files', text = 'Select a file:', type = 'open', ...) {  gfile(text=text, type=type, ..., action = action, handler = function(h,...) {    do.call(h$action, list(h$file))  })}
fileChoose <- function(action = 'list.files', text = 'Select a file:', type = 'open') {  gfile(text=text, type=type, action = action, handler = function(h) {    do.call(h$action, list(h$file))  })}
xtable
z <- xtable::xtable(space(df_total), caption = 'Overview of amounts donated/firmly pledged as a percentage of total requested, by appeal', digits = 0, label = "tab_overview")
packrat::init()
colorRampPalette
library("knitr", lib.loc="~/Dropbox/public.health/r/Rlibs")
install.packages("knitr")
library(gWidgets)
options("guiToolkit" = "tcltk")
w <- gbasicdialog(title = "Connection status", do.buttons = T, handler = function(h, ...)
online <<- svalue(selection))
selection <- gcombobox(c("Offline", "Online"), editable = F, expand = T, container = w)
visible(w, set = T) ## show dialog
if(online %in% 'Online'){
devtools::source_url("https://raw.githubusercontent.com/jpolonsky/erm_finan_rep/master/my_functions.R")
devtools::source_url("https://raw.githubusercontent.com/jpolonsky/erm_finan_rep/master/prepare_data.R")
} else {
source('./my_functions.R')
source('./prepare_data.R')
}
install.packages("gWidgetstcltk")
